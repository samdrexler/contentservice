/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Hook as PrismaHook,
  Script as PrismaScript,
} from "@prisma/client";

export class HookServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.HookCountArgs, "select">): Promise<number> {
    return this.prisma.hook.count(args);
  }

  async hooks(args: Prisma.HookFindManyArgs): Promise<PrismaHook[]> {
    return this.prisma.hook.findMany(args);
  }
  async hook(args: Prisma.HookFindUniqueArgs): Promise<PrismaHook | null> {
    return this.prisma.hook.findUnique(args);
  }
  async createHook(args: Prisma.HookCreateArgs): Promise<PrismaHook> {
    return this.prisma.hook.create(args);
  }
  async updateHook(args: Prisma.HookUpdateArgs): Promise<PrismaHook> {
    return this.prisma.hook.update(args);
  }
  async deleteHook(args: Prisma.HookDeleteArgs): Promise<PrismaHook> {
    return this.prisma.hook.delete(args);
  }

  async findScripts(
    parentId: string,
    args: Prisma.ScriptFindManyArgs
  ): Promise<PrismaScript[]> {
    return this.prisma.hook
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .scripts(args);
  }
}
