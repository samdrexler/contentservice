/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { ContentIdeaService } from "../contentIdea.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { ContentIdeaCreateInput } from "./ContentIdeaCreateInput";
import { ContentIdea } from "./ContentIdea";
import { ContentIdeaFindManyArgs } from "./ContentIdeaFindManyArgs";
import { ContentIdeaWhereUniqueInput } from "./ContentIdeaWhereUniqueInput";
import { ContentIdeaUpdateInput } from "./ContentIdeaUpdateInput";
import { ScriptFindManyArgs } from "../../script/base/ScriptFindManyArgs";
import { Script } from "../../script/base/Script";
import { ScriptWhereUniqueInput } from "../../script/base/ScriptWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class ContentIdeaControllerBase {
  constructor(
    protected readonly service: ContentIdeaService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ContentIdea })
  @nestAccessControl.UseRoles({
    resource: "ContentIdea",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createContentIdea(
    @common.Body() data: ContentIdeaCreateInput
  ): Promise<ContentIdea> {
    return await this.service.createContentIdea({
      data: {
        ...data,

        trendAnalysis: data.trendAnalysis
          ? {
              connect: data.trendAnalysis,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        title: true,
        description: true,

        trendAnalysis: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [ContentIdea] })
  @ApiNestedQuery(ContentIdeaFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ContentIdea",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async contentIdeas(@common.Req() request: Request): Promise<ContentIdea[]> {
    const args = plainToClass(ContentIdeaFindManyArgs, request.query);
    return this.service.contentIdeas({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        title: true,
        description: true,

        trendAnalysis: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ContentIdea })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ContentIdea",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async contentIdea(
    @common.Param() params: ContentIdeaWhereUniqueInput
  ): Promise<ContentIdea | null> {
    const result = await this.service.contentIdea({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        title: true,
        description: true,

        trendAnalysis: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ContentIdea })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ContentIdea",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateContentIdea(
    @common.Param() params: ContentIdeaWhereUniqueInput,
    @common.Body() data: ContentIdeaUpdateInput
  ): Promise<ContentIdea | null> {
    try {
      return await this.service.updateContentIdea({
        where: params,
        data: {
          ...data,

          trendAnalysis: data.trendAnalysis
            ? {
                connect: data.trendAnalysis,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          title: true,
          description: true,

          trendAnalysis: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ContentIdea })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ContentIdea",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteContentIdea(
    @common.Param() params: ContentIdeaWhereUniqueInput
  ): Promise<ContentIdea | null> {
    try {
      return await this.service.deleteContentIdea({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          title: true,
          description: true,

          trendAnalysis: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/scripts")
  @ApiNestedQuery(ScriptFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Script",
    action: "read",
    possession: "any",
  })
  async findScripts(
    @common.Req() request: Request,
    @common.Param() params: ContentIdeaWhereUniqueInput
  ): Promise<Script[]> {
    const query = plainToClass(ScriptFindManyArgs, request.query);
    const results = await this.service.findScripts(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        content: true,

        contentIdea: {
          select: {
            id: true,
          },
        },

        hook: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/scripts")
  @nestAccessControl.UseRoles({
    resource: "ContentIdea",
    action: "update",
    possession: "any",
  })
  async connectScripts(
    @common.Param() params: ContentIdeaWhereUniqueInput,
    @common.Body() body: ScriptWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      scripts: {
        connect: body,
      },
    };
    await this.service.updateContentIdea({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/scripts")
  @nestAccessControl.UseRoles({
    resource: "ContentIdea",
    action: "update",
    possession: "any",
  })
  async updateScripts(
    @common.Param() params: ContentIdeaWhereUniqueInput,
    @common.Body() body: ScriptWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      scripts: {
        set: body,
      },
    };
    await this.service.updateContentIdea({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/scripts")
  @nestAccessControl.UseRoles({
    resource: "ContentIdea",
    action: "update",
    possession: "any",
  })
  async disconnectScripts(
    @common.Param() params: ContentIdeaWhereUniqueInput,
    @common.Body() body: ScriptWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      scripts: {
        disconnect: body,
      },
    };
    await this.service.updateContentIdea({
      where: params,
      data,
      select: { id: true },
    });
  }
}
