/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ContentIdea } from "./ContentIdea";
import { ContentIdeaCountArgs } from "./ContentIdeaCountArgs";
import { ContentIdeaFindManyArgs } from "./ContentIdeaFindManyArgs";
import { ContentIdeaFindUniqueArgs } from "./ContentIdeaFindUniqueArgs";
import { CreateContentIdeaArgs } from "./CreateContentIdeaArgs";
import { UpdateContentIdeaArgs } from "./UpdateContentIdeaArgs";
import { DeleteContentIdeaArgs } from "./DeleteContentIdeaArgs";
import { ScriptFindManyArgs } from "../../script/base/ScriptFindManyArgs";
import { Script } from "../../script/base/Script";
import { TrendAnalysis } from "../../trendAnalysis/base/TrendAnalysis";
import { ContentIdeaService } from "../contentIdea.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ContentIdea)
export class ContentIdeaResolverBase {
  constructor(
    protected readonly service: ContentIdeaService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ContentIdea",
    action: "read",
    possession: "any",
  })
  async _contentIdeasMeta(
    @graphql.Args() args: ContentIdeaCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ContentIdea])
  @nestAccessControl.UseRoles({
    resource: "ContentIdea",
    action: "read",
    possession: "any",
  })
  async contentIdeas(
    @graphql.Args() args: ContentIdeaFindManyArgs
  ): Promise<ContentIdea[]> {
    return this.service.contentIdeas(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ContentIdea, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ContentIdea",
    action: "read",
    possession: "own",
  })
  async contentIdea(
    @graphql.Args() args: ContentIdeaFindUniqueArgs
  ): Promise<ContentIdea | null> {
    const result = await this.service.contentIdea(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ContentIdea)
  @nestAccessControl.UseRoles({
    resource: "ContentIdea",
    action: "create",
    possession: "any",
  })
  async createContentIdea(
    @graphql.Args() args: CreateContentIdeaArgs
  ): Promise<ContentIdea> {
    return await this.service.createContentIdea({
      ...args,
      data: {
        ...args.data,

        trendAnalysis: args.data.trendAnalysis
          ? {
              connect: args.data.trendAnalysis,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ContentIdea)
  @nestAccessControl.UseRoles({
    resource: "ContentIdea",
    action: "update",
    possession: "any",
  })
  async updateContentIdea(
    @graphql.Args() args: UpdateContentIdeaArgs
  ): Promise<ContentIdea | null> {
    try {
      return await this.service.updateContentIdea({
        ...args,
        data: {
          ...args.data,

          trendAnalysis: args.data.trendAnalysis
            ? {
                connect: args.data.trendAnalysis,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ContentIdea)
  @nestAccessControl.UseRoles({
    resource: "ContentIdea",
    action: "delete",
    possession: "any",
  })
  async deleteContentIdea(
    @graphql.Args() args: DeleteContentIdeaArgs
  ): Promise<ContentIdea | null> {
    try {
      return await this.service.deleteContentIdea(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Script], { name: "scripts" })
  @nestAccessControl.UseRoles({
    resource: "Script",
    action: "read",
    possession: "any",
  })
  async findScripts(
    @graphql.Parent() parent: ContentIdea,
    @graphql.Args() args: ScriptFindManyArgs
  ): Promise<Script[]> {
    const results = await this.service.findScripts(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => TrendAnalysis, {
    nullable: true,
    name: "trendAnalysis",
  })
  @nestAccessControl.UseRoles({
    resource: "TrendAnalysis",
    action: "read",
    possession: "any",
  })
  async getTrendAnalysis(
    @graphql.Parent() parent: ContentIdea
  ): Promise<TrendAnalysis | null> {
    const result = await this.service.getTrendAnalysis(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
